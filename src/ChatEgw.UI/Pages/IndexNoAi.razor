@page "/"
@using ChatEgw.UI.Application.Models
@using ChatEgw.UI.Services
@using EnumsNET
@inject TreeService TreeService

@code {
    private AiAnswerModel Model { get; set; } = new();

    private List<AnswerResponse>? Answers { get; set; } = new();
    private SearchTypeEnum _aiType = SearchTypeEnum.AiSearch;
    private bool _showAiResponse;
    private bool _expanded;

}

<EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator/>
    <input type="submit" class="d-none"/>

    <MudButtonGroup Class="mt-5 d-inline-block" Size="Size.Medium" Variant="@Variant.Filled" OverrideStyles="false">
        <MudButton Variant="@Variant.Filled"
                   Color="@(_aiType == SearchTypeEnum.AiSearch ? Color.Primary : Color.Default)"
                   OnClick="@(() => _aiType = SearchTypeEnum.AiSearch)">
            @SearchTypeEnum.AiSearch.AsString(EnumFormat.Description)
        </MudButton>
        <MudButton Variant="@Variant.Filled"
                   Color="@(_aiType == SearchTypeEnum.KeywordSearch ? Color.Primary : Color.Default)"
                   OnClick="@(() => _aiType = SearchTypeEnum.KeywordSearch)">
            @SearchTypeEnum.KeywordSearch.AsString(EnumFormat.Description)
        </MudButton>
    </MudButtonGroup>

    @* <MudPaper Class="pa-4 my-5 "> *@
    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
        <MudTextField
            @bind-Value="Model.Query"
            For="@(() => Model.Query)"
            Label="Search"
            Placeholder="Type in your search query"
            Clearable="true"
            Variant="Variant.Text"
            Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Search"
            Class="my-5"
            OnAdornmentClick="HandleAdornmentClick"/>
    </MudFocusTrap>
    @* </MudPaper> *@

</EditForm>
@if (!string.IsNullOrWhiteSpace(_error))
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
else
{
    switch (_state)
    {
        case LoadingState.New:
            <p>Working BETA</p>
            break;
        case LoadingState.Loading:
            <MudElement Class="align-center align-content-center  d-flex align-self-center justify-center my-12">
                <MudProgressLinear Color="Color.Primary" Size="Size.Medium" Indeterminate="true"/>
            </MudElement>
            break;
        case LoadingState.Completed:
            if (_showAiResponse)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Response</MudText>
                        </CardHeaderContent>

                        <CardHeaderActions>
                            @if (!string.IsNullOrWhiteSpace(_prompt))
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" OnClick="@(() => HandleShowPrompt(_prompt))"/>
                            }
                        </CardHeaderActions>

                    </MudCardHeader>
                </MudCard>
            }

            <MudPaper Class="mt-5 pa-4">
                <MudText Typo="Typo.h6" Class="mb-4">Search results</MudText>

                @if (Answers == null)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="width: 100%; height:  200px"/>
                }
                else if (!Answers.Any())
                {
                    <MudText>We did not find results for: &ldquo;<i>@Model.Query</i>&rdquo;</MudText>
                }
                else
                {
                    int i = 0;
                    foreach (AnswerResponse answer in _expanded ? Answers : Answers.Take(10))
                    {
                        var index = i;
                        <AiAnswer Id="@("answer-" + index)" Answer="answer"/>
                        i++;
                    }

                    if (!_expanded && Answers.Count > 10)
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => _expanded = true)">Show all</MudButton>
                    }
                }
            </MudPaper>
            break;
    }
}