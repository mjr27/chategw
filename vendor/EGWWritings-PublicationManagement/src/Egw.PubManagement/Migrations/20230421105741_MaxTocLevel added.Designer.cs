// <auto-generated />
using System;
using Egw.PubManagement.Persistence;
using Egw.PubManagement.Persistence.Entities.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Egw.PubManagement.Migrations
{
    [DbContext(typeof(PublicationDbContext))]
    [Migration("20230421105741_MaxTocLevel added")]
    partial class MaxTocLeveladded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.ExportedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("filename");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_publication_exports");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("ix_publication_exports_publication_id");

                    b.ToTable("publication_exports", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("GlobalOrder")
                        .HasColumnType("integer")
                        .HasColumnName("global_order");

                    b.Property<string>("MaterializedPath")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("materialized_path");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_folders");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_folders_type_id");

                    b.HasIndex("ParentId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_folders_parent_id_order");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.FolderType", b =>
                {
                    b.Property<string>("FolderTypeId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("folder_type_id");

                    b.Property<string>("AllowedTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("allowed_types");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("FolderTypeId")
                        .HasName("pk_folder_types");

                    b.ToTable("folder_types", (string)null);

                    b.HasData(
                        new
                        {
                            FolderTypeId = "root",
                            AllowedTypes = "",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Root",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "books",
                            AllowedTypes = "book bible-commentary",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Books",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "egwwritings",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "EGW Writings",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "biography",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Biography",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "devotionals",
                            AllowedTypes = "devotional",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Devotionals",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "periodicals",
                            AllowedTypes = "periodical/page-break periodical/no-page-break",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Periodicals",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "reference",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Reference",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible",
                            AllowedTypes = "bible",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Bible",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible-concordances",
                            AllowedTypes = "dictionary topical-index",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Bible Concordances",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible-commentaries",
                            AllowedTypes = "bible-commentary",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Bible Commentaries",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible-sdasi",
                            AllowedTypes = "scripture-index",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "EGW Scripture Indices",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible-dictionaries",
                            AllowedTypes = "dictionary",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Bible Dictionaries",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "bible-versions",
                            AllowedTypes = "bible",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Bible Versions",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "misc-collections",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Misc Collections",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "pamphlets",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Pamphlets",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "manuscript-releases",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Manuscript releases",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "letters-manuscripts",
                            AllowedTypes = "manuscript-volume",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Letters & manuscripts",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "research-documents",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "EGW Research Documents",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "reference-works",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Reference Works",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "recent-authors",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Recent Authors",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "modern-english",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Modern English",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "misc-titles",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Misc Titles",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "dictionary",
                            AllowedTypes = "dictionary",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Dictionaries",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "topical-index",
                            AllowedTypes = "topical-index",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Topical indexes",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "childrens-stories",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Children stories",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "study-guides",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Study guides",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "adventist-beliefs",
                            AllowedTypes = "book",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Adventist beliefs",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            FolderTypeId = "apl",
                            AllowedTypes = "book periodical/page-break periodical/no-page-break",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Adventist Pioneer Library",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Bcp47Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bcp47code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EgwCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("egw_code");

                    b.Property<bool>("IsRightToLeft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_right_to_left");

                    b.Property<int?>("RootFolderId")
                        .HasColumnType("integer")
                        .HasColumnName("root_folder_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Code")
                        .HasName("pk_languages");

                    b.HasIndex("Bcp47Code")
                        .IsUnique()
                        .HasDatabaseName("ix_languages_bcp47code");

                    b.HasIndex("RootFolderId")
                        .IsUnique()
                        .HasDatabaseName("ix_languages_root_folder_id");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Mp3File", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<string>("Filename")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("filename");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer")
                        .HasColumnName("element_id");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_generated");

                    b.Property<string>("ParaId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("para_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VoiceType")
                        .HasColumnType("integer")
                        .HasColumnName("voice_type");

                    b.HasKey("PublicationId", "Filename")
                        .HasName("pk_publication_mp3files");

                    b.HasIndex("ParaId", "VoiceType")
                        .IsUnique()
                        .HasDatabaseName("ix_publication_mp3files_para_id_voice_type");

                    b.ToTable("publication_mp3files", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Paragraph", b =>
                {
                    b.Property<string>("ParaId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("para_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("HeadingLevel")
                        .HasColumnType("integer")
                        .HasColumnName("heading_level");

                    b.Property<bool>("IsReferenced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_referenced");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("ParagraphId")
                        .HasColumnType("integer")
                        .HasColumnName("paragraph_id");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ParaId")
                        .HasName("pk_paragraphs");

                    b.HasIndex("PublicationId", "HeadingLevel")
                        .HasDatabaseName("ix_paragraphs_publication_id_heading_level");

                    b.HasIndex("PublicationId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_paragraphs_publication_id_order");

                    b.HasIndex("PublicationId", "ParaId")
                        .IsUnique()
                        .HasDatabaseName("ix_paragraphs_publication_id_para_id");

                    b.ToTable("paragraphs", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.ParagraphLink", b =>
                {
                    b.Property<string>("ParaId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("para_id");

                    b.Property<string>("OriginalParaId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("original_para_id");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer")
                        .HasColumnName("element_id");

                    b.Property<int>("OriginalElementId")
                        .HasColumnType("integer")
                        .HasColumnName("original_element_id");

                    b.Property<int>("OriginalPublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("original_publication_id");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.HasKey("ParaId", "OriginalParaId")
                        .HasName("pk_publication_links");

                    b.HasIndex("OriginalParaId")
                        .HasDatabaseName("ix_publication_links_original_para_id");

                    b.HasIndex("OriginalPublicationId", "OriginalElementId")
                        .HasDatabaseName("ix_publication_links_original_publication_id_original_element_");

                    b.HasIndex("PublicationId", "ElementId")
                        .HasDatabaseName("ix_publication_links_publication_id_element_id");

                    b.HasIndex("PublicationId", "OriginalPublicationId")
                        .HasDatabaseName("ix_publication_links_publication_id_original_publication_id");

                    b.ToTable("publication_links", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.ParagraphMetadata", b =>
                {
                    b.Property<string>("ParaId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("para_id");

                    b.Property<BibleMetadata>("BibleMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("bible_metadata");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<LtMsMetadata>("LtMsMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("lt_ms_metadata");

                    b.Property<PaginationMetaData>("Pagination")
                        .HasColumnType("jsonb")
                        .HasColumnName("pagination");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ParaId")
                        .HasName("pk_paragraph_metadata");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("ix_paragraph_metadata_publication_id");

                    b.HasIndex("PublicationId", "Date")
                        .HasDatabaseName("ix_paragraph_metadata_publication_id_date");

                    b.ToTable("paragraph_metadata", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Publication", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PublicationId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("language_code");

                    b.Property<int?>("OriginalPublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("original_publication_id");

                    b.Property<int?>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("integer")
                        .HasColumnName("publication_year");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<string>("PurchaseLink")
                        .HasColumnType("text")
                        .HasColumnName("purchase_link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PublicationId")
                        .HasName("pk_publications");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_publications_author_id");

                    b.HasIndex("LanguageCode")
                        .HasDatabaseName("ix_publications_language_code");

                    b.HasIndex("OriginalPublicationId")
                        .HasDatabaseName("ix_publications_original_publication_id");

                    b.ToTable("publications", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("integer")
                        .HasColumnName("birth_year");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("integer")
                        .HasColumnName("death_year");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("middle_name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationChapter", b =>
                {
                    b.Property<string>("ParaId")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("para_id");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("chapter_id");

                    b.Property<int>("ContentEndOrder")
                        .HasColumnType("integer")
                        .HasColumnName("content_end_order");

                    b.Property<string>("ContentEndParaId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("content_end_para_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EndOrder")
                        .HasColumnType("integer")
                        .HasColumnName("end_order");

                    b.Property<string>("EndParaId")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)")
                        .HasColumnName("end_para_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ParaId")
                        .HasName("pk_publication_chapters");

                    b.HasIndex("ContentEndParaId")
                        .HasDatabaseName("ix_publication_chapters_content_end_para_id");

                    b.HasIndex("EndParaId")
                        .HasDatabaseName("ix_publication_chapters_end_para_id");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("ix_publication_chapters_publication_id");

                    b.ToTable("publication_chapters", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationPlacement", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnType("integer")
                        .HasColumnName("publication_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer")
                        .HasColumnName("folder_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("permission");

                    b.Property<int?>("TocDepth")
                        .HasColumnType("integer")
                        .HasColumnName("toc_depth");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PublicationId")
                        .HasName("pk_publication_placement");

                    b.HasIndex("FolderId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_publication_placement_folder_id_order");

                    b.ToTable("publication_placement", (string)null);
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationSeries", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int[]>("Publications")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("publications");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Code")
                        .HasName("pk_publication_series");

                    b.ToTable("publication_series", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "bc",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 90, 91, 92, 93, 94, 95, 96, 97 },
                            Title = "EGW SDA Bible Commentary",
                            Type = "series",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "sdabc",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 12511, 12513, 12514, 12515, 12516, 12517, 12518 },
                            Title = "SDA Bible Commentary",
                            Type = "series",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "education",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 10, 23, 29, 32, 103, 1976 },
                            Title = "Education",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "parenting",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 2, 6, 7, 8, 86, 128 },
                            Title = "Parenting",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "leadership",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 12, 35, 84, 88, 127, 14222 },
                            Title = "Leadership",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "publishing",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 16, 24, 390 },
                            Title = "Publishing",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "egw_biography",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 11, 41, 105, 665, 667, 668, 669, 670, 671, 672 },
                            Title = "EGW Biography",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "church_history",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 11, 41, 104, 127, 132, 140, 141, 145, 665 },
                            Title = "Church History",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "last_day_events",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 3, 26, 28, 36, 39, 100, 132, 1445 },
                            Title = "Last Day Events",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "christian_lifestyle",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 13, 14, 25, 27, 31, 77, 78, 87, 108, 137, 138, 146, 148, 386, 11974 },
                            Title = "Christian Lifestyle",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "devotional_readings",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 9, 17, 33, 38, 44, 74, 79, 80, 81, 89, 102, 126, 131, 147, 149, 151, 153, 12210, 12862 },
                            Title = "Devotional Readings",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "health_and_wellness",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 20, 75, 77, 78, 110, 125, 135, 384, 387, 388 },
                            Title = "Health and Wellness",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "history_of_redemption",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 84, 88, 104, 105, 106, 127, 130, 132, 140, 141, 142, 143, 145 },
                            Title = "History of Redemption",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "lessons_from_the_bible",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 15, 18, 84, 88, 90, 91, 92, 93, 94, 95, 96, 101, 127, 130, 12119 },
                            Title = "Lessons from the Bible",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "church_life_and_ministry",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 19, 21, 22, 83, 98, 99, 100, 121, 123, 1445 },
                            Title = "Church Life and Ministry",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "youth_and_modern_english",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 7, 76, 144, 1974, 1976, 1977, 1978, 1980, 2017, 2715, 2723, 12269 },
                            Title = "Youth and Modern English",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "evangelism_and_witnessing",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 1, 11, 13, 16, 30, 34, 35, 45, 152, 389, 489, 492, 496, 806, 12399 },
                            Title = "Evangelism and Witnessing",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "christ_s_life_and_ministry",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 15, 108, 130, 144, 150 },
                            Title = "Christ's Life and Ministry",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "relationships_and_marriage",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 2, 4, 19, 40, 76, 77, 78, 122, 128 },
                            Title = "Relationships and Marriage",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "testimonies_for_the_church",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 112, 113, 114, 115, 116, 117, 118, 119, 120, 2003, 2004, 2005 },
                            Title = "Testimonies for the Church",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "conflict_of_the_ages_series",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 84, 88, 127, 130, 132 },
                            Title = "Conflict of the Ages Series",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Code = "the_life_of_faith_collection",
                            CreatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Publications = new[] { 15, 29, 108, 135, 150 },
                            Title = "The Life of Faith Collection",
                            Type = "topic",
                            UpdatedAt = new DateTimeOffset(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.ExportedFile", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_exports_publications_publication_id");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Folder", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_folders_folders_parent_id");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.FolderType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folders_folder_types_type_id");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Language", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Folder", "RootFolder")
                        .WithMany()
                        .HasForeignKey("RootFolderId")
                        .HasConstraintName("fk_languages_folders_root_folder_id");

                    b.Navigation("RootFolder");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Paragraph", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Publication", "Publication")
                        .WithMany("Paragraphs")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paragraphs_publications_publication_id");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.ParagraphMetadata", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Paragraph", "Paragraph")
                        .WithOne("Metadata")
                        .HasForeignKey("Egw.PubManagement.Persistence.Entities.ParagraphMetadata", "ParaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paragraph_metadata_paragraphs_paragraph_id");

                    b.Navigation("Paragraph");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Publication", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.PublicationAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_publications_authors_author_id");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publications_languages_language_temp_id");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.Publication", "OriginalPublication")
                        .WithMany()
                        .HasForeignKey("OriginalPublicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_publications_publications_original_publication_id");

                    b.Navigation("Author");

                    b.Navigation("Language");

                    b.Navigation("OriginalPublication");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationChapter", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Paragraph", "ContentEndParagraph")
                        .WithMany()
                        .HasForeignKey("ContentEndParaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_chapters_paragraphs_content_end_paragraph_paragrap");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.Paragraph", "EndParagraph")
                        .WithMany()
                        .HasForeignKey("EndParaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_chapters_paragraphs_end_paragraph_paragraph_id");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.Paragraph", "Paragraph")
                        .WithMany()
                        .HasForeignKey("ParaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_chapters_paragraphs_paragraph_id");

                    b.Navigation("ContentEndParagraph");

                    b.Navigation("EndParagraph");

                    b.Navigation("Paragraph");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.PublicationPlacement", b =>
                {
                    b.HasOne("Egw.PubManagement.Persistence.Entities.Folder", "Folder")
                        .WithMany("Placements")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_placement_folders_folder_id");

                    b.HasOne("Egw.PubManagement.Persistence.Entities.Publication", "Publication")
                        .WithOne("Placement")
                        .HasForeignKey("Egw.PubManagement.Persistence.Entities.PublicationPlacement", "PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publication_placement_publications_publication_id");

                    b.Navigation("Folder");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Folder", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Placements");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Paragraph", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Egw.PubManagement.Persistence.Entities.Publication", b =>
                {
                    b.Navigation("Paragraphs");

                    b.Navigation("Placement");
                });
#pragma warning restore 612, 618
        }
    }
}
